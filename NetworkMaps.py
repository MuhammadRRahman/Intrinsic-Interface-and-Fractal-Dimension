#!/usr/bin/env python3
# -*- coding: utf-8 -*-
## Creates maps of the stress-networks at the intrinsic interface. These maps were then used for further surface analysis, i.e., FD.


import matplotlib.pyplot as plt
import numpy as np
import numpy.ma as ma
import sys
from scipy.stats import norm

from matplotlib.font_manager import FontProperties
font = FontProperties()
font.set_family('serif')
font.set_name('Times New Roman')
font.set_size(34)


ppdir = <directory to postprocesslib>
sys.path.append(ppdir)
import postproclib as ppl

normal = 0

#Get Post Proc Object
fdir = <directory to data generated by tracking the intrinsic interface>
PPObj = ppl.All_PostProc(fdir)
print(PPObj)

#Get plotting object
plotObj = PPObj.plotlist['psurface']
msnapObj = PPObj.plotlist['msnap']

startrec = 0
endrec =  plotObj.maxrec-2

#Get Contour
naxes = [0,1,2]
naxes.remove(normal)
bins = int(input('Enter bin number: '))
binwidth = 0
binlimits = [None]*3
binlimits[normal] = (bins-binwidth, bins+binwidth+1) #Python +1 slicing
fig, ax = plt.subplots(1,1)
#plt.ion()
#plt.show()
ft = True

for r in range (startrec,endrec): # i would avoid the first record 
    ax1, ax2, data = plotObj.contour(axes=naxes,
                                 startrec=r,
                                 endrec=r,
                                 binlimits=binlimits,
                                 missingrec='returnzeros')

    ax1, ax2, msnap = msnapObj.contour(axes=naxes,
                                 startrec=r,
                                 endrec=r,
                                 binlimits=binlimits,
                                 missingrec='returnzeros')
    
    
    
    # #### NETWORK MAP ################
    plt.figure(figsize=(14,10))
    cmap = plt.cm.RdYlBu_r
    ptangent = data[:,:,4] + data[:,:,8]
    minp = ptangent.min()
    maxp = ptangent.max()
    #text = 'Minimum of ptangent is: {} and maximum of ptangent is: {}'
    #print( text.format (minp,maxp) )
    colormesh = plt.pcolormesh(ax1, ax2, data[:,:,4] + data[:,:,8], cmap=cmap, vmin = -100, vmax = 100.)
    #plt.colorbar()   
    plt.axis('off') 
        
    # #### MOLECULAR POSITIONS ########
    cmap_mol = plt.cm.binary
    mx = ma.masked_array(msnap[:,:,0], mask=msnap[:,:,0]>0)
    plt.pcolormesh(ax1, ax2, msnap[:,:,0], vmin=0.1, vmax=1, cmap=cmap_mol)
    
    cmap_mol.set_under(alpha=0.)
    #plt.colorbar(colormesh)

    if ft:
        #plt.colorbar(colormesh)
        ft = False
    plt.axis('square') 
    plt.axis("off")
    #plt.colorbar()
    #plt.savefig("FDbinsTest/Testfile_T080.{:05d}.tiff".format(r),bbox_inches='tight',pad_inches = 0,dpi=300)
    #plt.pause(0.0001)
    #plt.cla()
    
cb = plt.colorbar(colormesh)
cb.ax.tick_params(labelsize=30) 
plt.show()





